// Author: Chandan BN (c) 2021
//   (2) creates a bundled schema
const rp = require('json-schema-ref-parser');
const fs = require('fs');

const dirName = process.argv[3];

if(!dirName) {
        console.error('Please specify directory name');
        process.exit(1); 
}
 
async function schemaBundle() {
        var cveSchemaBundle = await rp.bundle(process.argv[2]);
        var metricProperties = cveSchemaBundle.definitions.metrics.items.properties;
        delete metricProperties.cvssV4_0.$id;
        delete metricProperties.cvssV3_1.id;
        delete metricProperties.cvssV3_0.id;
        delete metricProperties.cvssV2_0.id;
        delete metricProperties.cvssV4_0.license;
        delete metricProperties.cvssV3_1.license;
        delete metricProperties.cvssV3_0.license;
        delete metricProperties.cvssV2_0.license;
        delete metricProperties.ssvcV1_0_1.$id;

        fs.writeFile(`${dirName}/CVE_Record_Format_bundled.json`,
                JSON.stringify(cveSchemaBundle, null, 2),
                err => {
                        if(err)
                                throw err;
                        else 
                                console.log('CVE_Record_Format_bundled.json created');
                        }
        );

        for(let t of ['cnaPublishedContainer', 'cnaRejectedContainer', 'adpContainer']) {
                var subSchema = {
                        "$schema": "http://json-schema.org/draft-07/schema#",
                        "$id": `https://cveproject.github.io/cve-schema/schema/docs/CVE_Record_Format_bundled_${t}.json`,
                        "title": `CVE Record Format ${t} sub schema`,
                        "description": `CVE Record Format ${t} format`,
                        "definitions": cveSchemaBundle.definitions,
                        "properties": {
                        },
                        "additionalProperties": false
                }
                subSchema.properties[t.replace(/Published|Rejected/,'')] = {
                        "$ref": `#/definitions/${t}`
                }

                fs.writeFile(`${dirName}/CVE_Record_Format_bundled_${t}.json`,
                        JSON.stringify(subSchema, null, 2),
                        err => {
                                if(err)
                                        throw err;
                                else 
                                        console.log(`CVE_Record_Format_bundled_${t}.json created`);
                                }
                );
        }
}

schemaBundle();
